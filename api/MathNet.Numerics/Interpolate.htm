<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Interpolate - Math.NET Numerics Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../MathNet.Numerics/index.htm" class="current">MathNet.Numerics</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Differentiation/index.htm">MathNet.Numerics.Differentiation</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Distributions/index.htm">MathNet.Numerics.Distributions</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Financial/index.htm">MathNet.Numerics.Financial</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.IntegralTransforms/index.htm">MathNet.Numerics.IntegralTransforms</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Integration/index.htm">MathNet.Numerics.Integration</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Interpolation/index.htm">MathNet.Numerics.Interpolation</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra/index.htm">MathNet.Numerics.LinearAlgebra</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Complex/index.htm">MathNet.Numerics.LinearAlgebra.Complex</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Complex.Solvers/index.htm">MathNet.Numerics.LinearAlgebra.Complex.Solvers</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Complex32/index.htm">MathNet.Numerics.LinearAlgebra.Complex32</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Complex32.Solvers/index.htm">MathNet.Numerics.LinearAlgebra.Complex32.Solvers</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Double/index.htm">MathNet.Numerics.LinearAlgebra.Double</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Double.Solvers/index.htm">MathNet.Numerics.LinearAlgebra.Double.Solvers</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Factorization/index.htm">MathNet.Numerics.LinearAlgebra.Factorization</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Single/index.htm">MathNet.Numerics.LinearAlgebra.Single</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Single.Solvers/index.htm">MathNet.Numerics.LinearAlgebra.Single.Solvers</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Solvers/index.htm">MathNet.Numerics.LinearAlgebra.Solvers</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearAlgebra.Storage/index.htm">MathNet.Numerics.LinearAlgebra.Storage</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.LinearRegression/index.htm">MathNet.Numerics.LinearRegression</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.OdeSolvers/index.htm">MathNet.Numerics.OdeSolvers</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Optimization/index.htm">MathNet.Numerics.Optimization</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Optimization.LineSearch/index.htm">MathNet.Numerics.Optimization.LineSearch</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Optimization.ObjectiveFunctions/index.htm">MathNet.Numerics.Optimization.ObjectiveFunctions</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Optimization.TrustRegion/index.htm">MathNet.Numerics.Optimization.TrustRegion</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Providers.Common.Cuda/index.htm">MathNet.Numerics.Providers.Common.Cuda</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Providers.Common.Mkl/index.htm">MathNet.Numerics.Providers.Common.Mkl</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Providers.Common.OpenBlas/index.htm">MathNet.Numerics.Providers.Common.OpenBlas</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Providers.FourierTransform/index.htm">MathNet.Numerics.Providers.FourierTransform</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Providers.LinearAlgebra/index.htm">MathNet.Numerics.Providers.LinearAlgebra</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Providers.LinearAlgebra.OpenBlas/index.htm">MathNet.Numerics.Providers.LinearAlgebra.OpenBlas</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Providers.SparseSolver/index.htm">MathNet.Numerics.Providers.SparseSolver</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Random/index.htm">MathNet.Numerics.Random</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.RootFinding/index.htm">MathNet.Numerics.RootFinding</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Statistics/index.htm">MathNet.Numerics.Statistics</a>
      </li>
			<li>
          <a href="../MathNet.Numerics.Statistics.Mcmc/index.htm">MathNet.Numerics.Statistics.Mcmc</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in MathNet.Numerics</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../MathNet.Numerics/AppSwitches.htm">AppSwitches</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Combinatorics.htm">Combinatorics</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Complex32.htm">Complex32</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/ComplexExtensions.htm">ComplexExtensions</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Constants.htm">Constants</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/ContourIntegrate.htm">ContourIntegrate</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Control.htm">Control</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Differentiate.htm">Differentiate</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/DifferIntegrate.htm">DifferIntegrate</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Distance.htm">Distance</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Euclid.htm">Euclid</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Evaluate.htm">Evaluate</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/ExcelFunctions.htm">ExcelFunctions</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/FindMinimum.htm">FindMinimum</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/FindRoots.htm">FindRoots</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Fit.htm">Fit</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Generate.htm">Generate</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/GoodnessOfFit.htm">GoodnessOfFit</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Integrate.htm">Integrate</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Interpolate.htm" class="current">Interpolate</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/InvalidParameterException.htm">InvalidParameterException</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/IPrecisionSupport`1.htm">IPrecisionSupport&lt;T&gt;</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/MemoryAllocationException.htm">MemoryAllocationException</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/NativeInterfaceException.htm">NativeInterfaceException</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/NonConvergenceException.htm">NonConvergenceException</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/NumericalBreakdownException.htm">NumericalBreakdownException</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Permutation.htm">Permutation</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Polynomial.htm">Polynomial</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Precision.htm">Precision</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/SingularUMatrixException.htm">SingularUMatrixException</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Sorting.htm">Sorting</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/SpecialFunctions.htm">SpecialFunctions</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/TestFunctions.htm">TestFunctions</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Trig.htm">Trig</a>
        </li>
				<li>
            <a href="../MathNet.Numerics/Window.htm">Window</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> Interpolate</p>
		<p><strong>Namespace</strong> MathNet.Numerics</p>
	</div>
    <div class="sub-header">
			<div id="summary">Interpolation Factory. 
			</div>
		

			<h3 class="section">Static Functions</h3>
			<ul>
				<li><a href="../MathNet.Numerics/Interpolate.htm#Common">Common</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#CubicSpline">CubicSpline</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#CubicSplineMonotone">CubicSplineMonotone</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#CubicSplineRobust">CubicSplineRobust</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#CubicSplineWithDerivatives">CubicSplineWithDerivatives</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#Linear">Linear</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#LogLinear">LogLinear</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#Polynomial">Polynomial</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#PolynomialEquidistant">PolynomialEquidistant</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#RationalWithoutPoles">RationalWithoutPoles</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#RationalWithPoles">RationalWithPoles</a></li>
				<li><a href="../MathNet.Numerics/Interpolate.htm#Step">Step</a></li>
			</ul>
		

		
	</div>
	
	
	
	<h3 class="section">Public Static Functions</h3>
	
	<div id="Common" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>Common</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Creates an interpolation based on arbitrary points. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="CubicSpline" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>CubicSpline</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create an piecewise natural cubic spline interpolation based on arbitrary points,
with zero secondary derivatives at the boundaries. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.CubicSpline.InterpolateNaturalSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="CubicSplineMonotone" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>CubicSplineMonotone</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a piecewise cubic monotone spline interpolation based on arbitrary points.
This is a shape-preserving spline with continuous first derivative. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.CubicSpline.InterpolatePchipSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="CubicSplineRobust" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>CubicSplineRobust</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a piecewise cubic Akima spline interpolation based on arbitrary points.
Akima splines are robust to outliers. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.CubicSpline.InterpolateAkimaSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="CubicSplineWithDerivatives" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>CubicSplineWithDerivatives</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> firstDerivatives)</h4>
		<div class="content">Create a piecewise cubic Hermite spline interpolation based on arbitrary points
and their slopes/first derivative. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.CubicSpline.InterpolateHermiteSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> firstDerivatives</h6>
          <p class="comments">The slope at the sample points. Optimized for arrays. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="Linear" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>Linear</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a piecewise linear interpolation based on arbitrary points. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.LinearSpline.InterpolateSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="LogLinear" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>LogLinear</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create piecewise log-linear interpolation based on arbitrary points. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.LogLinear.InterpolateSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="Polynomial" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>Polynomial</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a Neville polynomial interpolation based on arbitrary points.
If the points happen to be equidistant, consider to use the much more robust PolynomialEquidistant instead.
Otherwise, consider whether RationalWithoutPoles would not be a more robust alternative. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.InterpolateSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="PolynomialEquidistant" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>PolynomialEquidistant</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a barycentric polynomial interpolation where the given sample points are equidistant. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.Barycentric.InterpolatePolynomialEquidistantSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t, must be equidistant. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="RationalWithoutPoles" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>RationalWithoutPoles</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a Floater-Hormann rational pole-free interpolation based on arbitrary points. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="RationalWithPoles" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>RationalWithPoles</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a Bulirsch Stoer rational interpolation based on arbitrary points. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.InterpolateSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>
	<div id="Step" class="method">
		<h4><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a> <strong>Step</strong>(<span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> points, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> values)</h4>
		<div class="content">Create a step-interpolation based on arbitrary points. <blockquote class="remarks">
  if your data is already sorted in arrays, consider to use
MathNet.Numerics.Interpolation.StepInterpolation.InterpolateSorted
instead, which is more efficient. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> points</h6>
          <p class="comments">The sample points t. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> values</h6>
          <p class="comments">The sample point values x(t). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../MathNet.Numerics.Interpolation/IInterpolation.htm">IInterpolation</a></code></h6>
        <p>An interpolation scheme optimized for the given sample points and values,
which can then be used to compute interpolations and extrapolations
on arbitrary points. </p>
      </div>
      
    </div>
	</div>

	
	<div id="footer">
  <p>Based on v4.14.0.0 of MathNet.Numerics (Math.NET Numerics)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>